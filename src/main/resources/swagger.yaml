openapi: 3.0.3
info:
  title: Healthcare API
  version: 1.0.0
  description: API for managing appointments, patients, doctors, and medical records.

tags:
  - name: Appointments
    description: Operations related to appointment management
  - name: Doctors
    description: Operations related to doctor management
  - name: Patients
    description: Operations related to patient management
  - name: Medical Records
    description: Operations related to medical record management

paths:
  /appointments:
    get:
      summary: Get all appointments
      tags: [Appointments]
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '204':
          description: No appointments exist
    post:
      summary: Create a new appointment
      tags: [Appointments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreationDTO'
      responses:
        '201':
          description: Appointment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'

  /appointments/{id}:
    get:
      summary: Get appointment by ID
      tags: [Appointments]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an appointment
      tags: [Appointments]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentUpdateDTO'
      responses:
        '200':
          description: Appointment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an appointment
      tags: [Appointments]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Appointment deleted
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /appointments/{id}/medical-record:
    get:
      summary: Get medical record for appointment
      tags: [Appointments]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Medical record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'
        '404':
          description: Appointment or Medical Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /doctors:
    get:
      summary: Get all doctors
      tags: [Doctors]
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
        '204':
          description: No doctors exist
    post:
      summary: Add a new doctor
      tags: [Doctors]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoctorCreationDTO'
      responses:
        '201':
          description: Doctor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'

  /doctors/{id}:
    get:
      summary: Get doctor by ID
      tags: [Doctors]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Doctor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Doctor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a doctor
      tags: [Doctors]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoctorCreationDTO'
      responses:
        '200':
          description: Doctor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Doctor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a doctor
      tags: [Doctors]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Doctor deleted
        '404':
          description: Doctor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /doctors/{id}/appointments:
    get:
      summary: Get all appointments for a doctor
      tags: [Doctors]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointments found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '404':
          description: Doctor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /patients:
    get:
      summary: Get all patients
      tags: [Patients]
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
        '204':
          description: No patients exist
    post:
      summary: Add a new patient
      tags: [Patients]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientCreationDTO'
      responses:
        '201':
          description: Patient created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'

  /patients/{id}:
    get:
      summary: Get patient by ID
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Patient found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a patient
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientCreationDTO'
      responses:
        '200':
          description: Patient updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a patient
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Patient deleted
        '404':
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /patients/{id}/appointments:
    get:
      summary: Get all appointments for a patient
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointments found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '404':
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /patients/{id}/medical-records:
    get:
      summary: Get all medical records for a patient
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Medical records found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalRecord'
        '404':
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /medical-records:
    post:
      summary: Create a medical record
      tags: [Medical Records]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalRecordCreationDTO'
      responses:
        '201':
          description: Medical record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'
        '400':
          description: Medical record already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    AppointmentCreationDTO:
      type: object
      required: [appointment_date, notes, doctor_id, patient_id]
      properties:
        appointment_date:
          type: string
          format: date-time
        notes:
          type: string
        doctor_id:
          type: integer
          format: int64
        patient_id:
          type: integer
          format: int64

    AppointmentUpdateDTO:
      type: object
      required: [appointment_date, notes, doctor_id, patient_id, status]
      properties:
        appointment_date:
          type: string
          format: date-time
        notes:
          type: string
        doctor_id:
          type: integer
          format: int64
        patient_id:
          type: integer
          format: int64
        status:
          type: string
          enum: [SCHEDULED, COMPLETED, CANCELLED]

    DoctorCreationDTO:
      type: object
      required: [name, specialisation, email, phone_number]
      properties:
        name:
          type: string
        specialisation:
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: string

    MedicalRecordCreationDTO:
      type: object
      required: [diagnosis, treatment, notes, appointment_id]
      properties:
        diagnosis:
          type: string
        treatment:
          type: string
        notes:
          type: string
        appointment_id:
          type: integer
          format: int64

    PatientCreationDTO:
      type: object
      required: [name, email, phone_number, address]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: string
        address:
          type: string

    Appointment:
      type: object
      properties:
        id:
          type: integer
        appointmentDate:
          type: string
          format: date-time
        notes:
          type: string
        doctor:
          $ref: '#/components/schemas/Doctor'
        patient:
          $ref: '#/components/schemas/Patient'
        status:
          type: string
          enum: [SCHEDULED, COMPLETED, CANCELLED]

    Doctor:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Patient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    MedicalRecord:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        date:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        messages:
          type: array
          items:
            type: string
